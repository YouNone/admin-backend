
id      parent     name        year
------------------------------------
1       null       name1       2002
2       null       name2       2021
3       1          name21      2000
4       1          name22      ---
5       4          name41       ----
6       4          name42       ----


SELECT * FROM data WHERE id = 1

> 1       null       name1       2002

SELECT * FROM data WHERE parent_id = 1

> 3       1          name21      2000
> 4       1          name22      ---

SELECT * FROM data WHERE parent_id = 3 OR parent_id = 3


function getBranch(rootId) {
    let res = [];

    idList = [...rootId];
    res = repository.getList(rootId);
    let ids = res.getId();
    res.concat(getBranch(ids));
    return res;
}

for( in )
foreigh key 
user.city_id = 10 
city -> id = 10 name = Kiev
city_id -> foreign key -> city 


Path Enumeration (Materialized Path) --
// сложно вставить запись между 1/3/7..

Adjacency list  -+
// самый простой вид таблицы не поддерживает плюшек nestJS 

Closure table
// хранит отношения между родителем и ребенком в отдельной таблице
// Обновление или удаление родительского компонента еще не было реализовано
// Таблица закрытия должна быть явно обновлена для выполнения любой из этих операций.

Nested set
// эффективно для чтения, но плохо для записи, не может иметь несколько корней во вложенном множестве



валидация удаления в дереве +-
связка многое к многим +
сделать общий обработчик ошибок в удалении записи +
сортировка дерева +
переписать task +


редактирование груп +- (2, 3 вкладка), создание +
редактирование юзера +, создание +
редактирование задач + создание - (ругается на поля дат create, modify)

переписать делит, сократить запись репо +
исправить параметры строки не совпадает с фронтом +
исправить сортировку +

написать шкалы +
отображение со стороны фронта +